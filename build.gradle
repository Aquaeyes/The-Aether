plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'io.github.0ffz.github-packages' version '[1,2)'
    id 'com.matthewprenger.cursegradle' version '[1.4,1.5)'
    id 'com.modrinth.minotaur' version '[2,3)'
}

version = "${mc_version}-${mod_version}-fabric"
group = 'com.aetherteam.aether'

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

loom {
//    enableEclipsePrepareRuns = true
//    enableIdeaPrepareRuns = true
//    copyIdeResources = true
//    generateRunFolders = true

    accessWidenerPath = file('src/main/resources/aether.accesswidener')

    runs {
//        datagen {
//            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing', file('src/generated/resources/'), '--existing-mod', 'nitrogen_internals', '--existing-mod', 'cumulus_menus'
//
//            environment 'target', 'fmluserdevdata'
//        }
        datagen {
            client()

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=aether"

            property "porting_lib.datagen.existing_resources", file("src/main/resources").absolutePath
            property "porting_lib.datagen.existing-mod", "nitrogen_internals,cumulus_menus"

            runDir "build/datagen"
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    minecraft "com.mojang:minecraft:${project.mc_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${project.mc_version}:${project.mappings}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    modImplementation include("com.aetherteam.nitrogen:nitrogen_internals:${project.nitrogen_version}")
    modImplementation include("com.aetherteam.cumulus:cumulus_menus:${project.cumulus_version}")

//    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${project.curios_version}+${project.mc_version}")

    for (String module in port_lib_modules.split(",")) {
        modImplementation(include("io.github.fabricators_of_create.Porting-Lib:$module:$port_lib_version+$mc_version"))
    }

    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
    // Adds a dependency on a specific module
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cca_version}"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
    // Includes Cardinal Components API as a Jar-in-Jar dependency (optional)
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cca_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"

//    compileOnly fg.deobf("top.theillusivec4.caelus:caelus-forge:${project.caelus_version}")

//    runtimeOnly fg.deobf("io.github.flemmli97:debugutils:${project.mc_version}-${project.debugutils_version}-forge")

//    jarJar fg.deobf("top.theillusivec4.curios:curios-forge:${project.curios_version}+${project.mc_version}") {
//        jarJar.ranged(it, "[${project.curios_version},)")
//        jarJar.pin(it, "${project.curios_version}+${project.mc_version}")
//    }
    modImplementation include("dev.emi:trinkets:${project.trinkets_version}")

    modCompileOnly("mezz.jei:jei-${mc_version}-common-api:${project.jei_version}")
    modCompileOnly("mezz.jei:jei-${mc_version}-fabric-api:${project.jei_version}")

    modCompileOnly("mezz.jei:jei-${mc_version}-fabric:${project.jei_version}")

    modCompileOnly("com.blamejared.crafttweaker:CraftTweaker-fabric-${project.crafttweaker_version}")

//    runtimeOnly fg.deobf("net.darkhax.bookshelf:Bookshelf-Forge-1.20.1:20.0.5")
//    runtimeOnly fg.deobf("net.darkhax.tips:Tips-Forge-1.20.1:12.0.3")

//    compileOnly fg.deobf("curse.maven:colytra-280200:${project.colytra_version}")
//    compileOnly fg.deobf("curse.maven:curious-elytra-317716:${project.curiouselytra_version}")
    modCompileOnly("curse.maven:jade-324717:${project.jade_version}")
    modCompileOnly("curse.maven:lootr-615106:${project.lootr_version}")

    modImplementation(include("me.shedaniel:mm:2.4.1"))

//    runtimeOnly fg.deobf("io.github.ultimateboomer:smoothboot-forge:${project.smoothboot_version}")

//    compileOnly fileTree(dir: 'libs', include: '*.jar')

//    runtimeOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:$rei_version")
//    runtimeOnly fg.deobf("me.shedaniel.cloth:cloth-config-forge:$cloth_config_version")
//    runtimeOnly fg.deobf("dev.architectury:architectury-forge:$architectury_version")

    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:$rei_version")
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:$rei_version")
    modRuntimeOnly modCompileOnly("me.shedaniel:RoughlyEnoughItems-fabric:$rei_version")
    modCompileOnly("me.shedaniel.cloth:cloth-config-fabric:$cloth_config_version")
    modCompileOnly("dev.architectury:architectury-fabric:$architectury_version")
}

repositories {
    maven { url = "https://jitpack.io" }
    maven { url = "https://maven.blamejared.com" }
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url = "https://www.cursemaven.com" }
    maven { url = "https://gitlab.com/api/v4/projects/21830712/packages/maven" }
    maven { url = "https://maven.parchmentmc.org" }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url = "https://mvn.devos.one/snapshots/" }
    maven { url = "https://maven.ladysnake.org/releases" }
    maven { url = "https://maven.terraformersmc.com/" }
    maven {
        url "https://maven.jamieswhiteshirt.com/libs-release"
        content {
            includeGroup "com.jamieswhiteshirt"
        }
    }
    maven githubPackage.invoke("The-Aether-Team/Nitrogen")
    maven githubPackage.invoke("The-Aether-Team/Cumulus")
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.architectury.dev/" }
    //mavenLocal()
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_name,
                "Specification-Vendor"    : "The Aether Team",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.mod_name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "The Aether Team",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    archiveClassifier = 'no-embeds'
}

compileJava {
    options.incremental = false
}

java {
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId project.archivesBaseName
            from components.java
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/The-Aether-Team/The-Aether"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

curseforge {
    project {
        apiKey = System.getenv("CURSEFORGE_TOKEN")
        id = "${project.curseforge_id}"
        releaseType = "${project.version_type}"
        changelog = file("$rootDir/docs/CHANGELOG.md")
        changelogType = "markdown"
        addGameVersion("${project.mc_version}")
        addGameVersion("Fabric")
        mainArtifact(tasks.build) {
            displayName = "${project.mod_name} - ${version}"
            relations {
                embeddedLibrary "curios"
                embeddedLibrary "cumulus"
            }
        }
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "${project.modrinth_id}"
    versionNumber = "${version}"
    versionType = "${project.version_type}"
    versionName = "${project.mod_name} - ${version}"
    changelog = new File("$rootDir/docs/CHANGELOG.md").text
    uploadFile = tasks.build
    gameVersions = ["${project.mc_version}"]
    loaders = ["fabric"]
    dependencies {
        embedded.version "trinkets", "${project.trinkets_version}+${project.mc_version}"
        embedded.version "cumulus", "${project.cumulus_version}"
    }
}
